# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# Scalars
scalar Time

# -- USER -----------------start------

type User {
  id: ID!
  createdAt: Time
  updatedAt: Time
  name:     String!
  lastname:     String!
  email:     String!
  activated: Boolean
  version:   Int
  roles: [String!]!
}

input NewUserInput {
  name: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
}

# -- USER -----------------end------

# -- OFFER -----------------start------

type SalaryByRoleResult {
  title: String!
  min: Float!
  max: Float!
  currency: String!
}

input SalaryByRole {
  title: String!
  min: Float!
  max: Float!
  currency: String!
}

type Offer {
  id: ID!
  createdAt: Time
  updatedAt: Time
  title: String!
  pictureUrl: String
  description: String!
  salary: [SalaryByRoleResult!]!
  active: Boolean
  version: Int
  userId: ID
  user: User
}

input NewOfferInput {
  userId: ID!
  title: String!
  description: String!
  salary: [SalaryByRole!]!
  pictureUrl: String!
}

# -- OFFER -----------------end------

# -- PROFILE -----------------start------

type Profile {
  id: ID!
  userId: ID
  user: User
  createdAt: Time
  updatedAt: Time
  title: String!
  about: String!
  status: String!
  country: String!
  state: String!
  city: String!
  pictureUrl: String
  websiteUrl: String
  salary: [SalaryByRoleResult!]!
  version: Int
}

input NewProfileInput {
  userId: ID!
  title: String!
  about: String!
  status: String!
  country: String!
  state: String!
  city: String!
  pictureUrl: String!
  websiteUrl: String!
  salary: [SalaryByRole!]!
}

# -- PROFILE -----------------end------

# -- TOKEN -----------------start------

input AuthTokenInput {
  email: String!
  password: String!
}

type AuthToken {
  key: String!
  expire: Time!
}

type AuthTokenResponse {
  authentication_token: AuthToken!
}

# -- TOKEN -----------------end------

# -- LOGOUT -----------------start------

type LogoutResponse {
  success: Boolean!
}

# -- LOGOUT -----------------end------

# -- BOOKMARKS -----------------start------

type BookmarkResponse {
  success: Boolean!
}

# -- BOOKMARKS -----------------end------

# -- APPLICANT -----------------start------

type ApplyResponse {
  success: Boolean!
}

# -- APPLICANT -----------------end------

type Query {
  users: [User]!
  offers: [Offer]!
  profile(id: ID!): Profile!
  profileByUserId(userId: ID!): Profile!
  bookmarks(userId: ID!): [Profile!]!
  applicants(offerId: ID!): [Profile!]!
}

type Mutation {
  createUser(input: NewUserInput!): User!
  createOffer(input: NewOfferInput!): Offer!
  createProfile(input: NewProfileInput!): Profile!
  createAuthToken(input: AuthTokenInput!): AuthTokenResponse!
  logOut(userId: ID!): LogoutResponse!
  createBookmark(userId: ID!, profileID: ID!): BookmarkResponse!
  deleteBookmark(userId: ID!, profileID: ID!): BookmarkResponse!
  applyToOffer(offerId: ID!, profileId: ID!): ApplyResponse!
}