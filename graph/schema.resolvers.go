package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"strconv"
	"time"

	"itfinder.adrianescat.com/graph/dataloaders"
	"itfinder.adrianescat.com/graph/model"
	"itfinder.adrianescat.com/internal/validator"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUserInput) (*model.User, error) {
	_, err := RequireAuthAndActivatedUser(ctx)
	if err != nil {
		return nil, err
	}

	user := &model.User{
		Name:      input.Name,
		Lastname:  input.LastName,
		Email:     input.Email,
		Roles:     []string{input.Role},
		Activated: false,
	}

	err = user.Password.Set(input.Password)
	if err != nil {
		return nil, err
	}

	v := validator.New()

	if model.ValidateUser(v, user); !v.Valid() {
		return nil, errors.New("wrong inputs")
	}

	err = r.Models.Users.Insert(user)

	if err != nil {
		r.Logger.PrintError(fmt.Errorf("%s", err), nil)
		return nil, err
	}

	return user, nil
}

// CreateOffer is the resolver for the createOffer field.
func (r *mutationResolver) CreateOffer(ctx context.Context, input model.NewOfferInput) (*model.Offer, error) {
	_, err := RequireAuthAndActivatedUser(ctx)
	if err != nil {
		return nil, err
	}

	uId, err := strconv.ParseInt(input.UserID, 10, 64)
	if err != nil {
		return nil, errors.New("wrong user_id type")
	}

	offer := &model.Offer{
		Title:       input.Title,
		UserId:      uId,
		PictureUrl:  input.PictureURL,
		Description: input.Description,
		Salary:      input.Salary,
	}

	v := validator.New()

	if model.ValidateOffer(v, offer); !v.Valid() {
		return nil, errors.New("wrong inputs")
	}

	err = r.Models.Offers.Insert(offer)

	if err != nil {
		r.Logger.PrintError(fmt.Errorf("%s", err), nil)
		return nil, err
	}

	return offer, nil
}

// CreateProfile is the resolver for the createProfile field.
func (r *mutationResolver) CreateProfile(ctx context.Context, input model.NewProfileInput) (*model.Profile, error) {
	_, err := RequireAuthAndActivatedUser(ctx)
	if err != nil {
		return nil, err
	}

	uId, err := strconv.ParseInt(input.UserID, 10, 64)
	if err != nil {
		return nil, errors.New("wrong user_id type")
	}

	profile := &model.Profile{
		UserId:     uId,
		Title:      input.Title,
		About:      input.About,
		Status:     input.Status,
		Country:    input.Country,
		State:      input.State,
		City:       input.City,
		PictureUrl: input.PictureURL,
		WebsiteUrl: input.WebsiteURL,
		Salary:     input.Salary,
	}

	v := validator.New()

	if model.ValidateProfile(v, profile); !v.Valid() {
		return nil, errors.New("wrong inputs")
	}

	err = r.Models.Profiles.Insert(profile)

	if err != nil {
		r.Logger.PrintError(fmt.Errorf("%s", err), nil)
		return nil, err
	}

	return profile, nil
}

// CreateAuthToken is the resolver for the createAuthToken field.
func (r *mutationResolver) CreateAuthToken(ctx context.Context, input model.AuthTokenInput) (*model.AuthTokenResponse, error) {
	// Validate the email and password provided by the client.
	v := validator.New()

	model.ValidateEmail(v, input.Email)
	model.ValidatePasswordPlaintext(v, input.Password)

	if !v.Valid() {
		return nil, errors.New("email and Password should be valid")
	}

	user, err := r.Models.Users.GetByEmail(input.Email)

	if err != nil {
		switch {
		case errors.Is(err, model.ErrRecordNotFound):
			return nil, errors.New("invalid credentials")
		default:
			return nil, errors.New("server error")
		}
	}

	// Check if the provided password matches the actual password for the user.
	match, err := user.Password.Matches(input.Password)
	if err != nil {
		return nil, errors.New("server error")
	}

	if !match {
		return nil, errors.New("invalid credentials")
	}

	token, err := r.Models.Tokens.New(user.ID, 24*time.Hour, model.ScopeAuthentication)
	if err != nil {
		return nil, errors.New("server error")
	}

	return &model.AuthTokenResponse{
		AuthenticationToken: &model.AuthToken{
			Key:    token.Plaintext,
			Expire: token.Expiry,
		},
	}, nil
}

// LogOut is the resolver for the logOut field.
func (r *mutationResolver) LogOut(ctx context.Context, userID string) (*model.LogoutResponse, error) {
	_, err := RequireAuthAndActivatedUser(ctx)
	if err != nil {
		return nil, err
	}

	uId, err := strconv.ParseInt(userID, 10, 64)
	if err != nil {
		return nil, errors.New("wrong profile id type")
	}

	err = r.Models.Tokens.DeleteAllForUser(model.ScopeAuthentication, uId)

	if err != nil {
		r.Logger.PrintError(fmt.Errorf("%s", err), nil)
		return nil, err
	}

	return &model.LogoutResponse{
		Success: true,
	}, nil
}

// CreateBookmark is the resolver for the createBookmark field.
func (r *mutationResolver) CreateBookmark(ctx context.Context, userID string, profileID string) (*model.BookmarkResponse, error) {
	user, err := RequireAuthAndActivatedUser(ctx)
	if err != nil {
		return nil, err
	}

	uId, err := strconv.ParseInt(userID, 10, 64)
	if err != nil {
		return nil, errors.New("wrong user_id type")
	}

	pId, err := strconv.ParseInt(profileID, 10, 64)
	if err != nil {
		return nil, errors.New("wrong profile_id type")
	}

	if user.ID != uId {
		return nil, errors.New("you can create only a bookmark for you")
	}

	err = r.Models.Users.CreateProfileBookmark(uId, pId)

	if err != nil {
		r.Logger.PrintError(fmt.Errorf("%s", err), nil)
		return nil, err
	}

	return &model.BookmarkResponse{
		Success: true,
	}, nil
}

// DeleteBookmark is the resolver for the deleteBookmark field.
func (r *mutationResolver) DeleteBookmark(ctx context.Context, userID string, profileID string) (*model.BookmarkResponse, error) {
	user, err := RequireAuthAndActivatedUser(ctx)
	if err != nil {
		return nil, err
	}

	uId, err := strconv.ParseInt(userID, 10, 64)
	if err != nil {
		return nil, errors.New("wrong user_id type")
	}

	pId, err := strconv.ParseInt(profileID, 10, 64)
	if err != nil {
		return nil, errors.New("wrong profile_id type")
	}

	if user.ID != uId {
		return nil, errors.New("you can delete only your bookmarks")
	}

	err = r.Models.Users.DeleteProfileBookmark(uId, pId)

	if err != nil {
		r.Logger.PrintError(fmt.Errorf("%s", err), nil)
		return nil, err
	}

	return &model.BookmarkResponse{
		Success: true,
	}, nil
}

// Salary is the resolver for the salary field.
func (r *offerResolver) Salary(ctx context.Context, obj *model.Offer) ([]*model.SalaryByRoleResult, error) {
	// I receive the Offer golang object here. So I convert the Salary (salaries type or []*model.SalaryByRole) into
	// []byte with Marshal
	salariesJSON, err := json.Marshal(obj.Salary)

	if err != nil {
		return nil, errors.New("Processing salary error")
	}

	// I convert the []byte to go object again but this time to the result that
	// graphql is expecting, in this case is []*model.SalaryByRoleResult
	var salaries []*model.SalaryByRoleResult
	err = json.Unmarshal(salariesJSON, &salaries)

	return salaries, nil
}

// User is the resolver for the user field.
func (r *offerResolver) User(ctx context.Context, obj *model.Offer) (*model.User, error) {
	return dataloaders.For(ctx).GetUser(ctx, strconv.FormatInt(obj.UserId, 10))
}

// User is the resolver for the user field.
func (r *profileResolver) User(ctx context.Context, obj *model.Profile) (*model.User, error) {
	return dataloaders.For(ctx).GetUser(ctx, strconv.FormatInt(obj.UserId, 10))
}

// Salary is the resolver for the salary field.
func (r *profileResolver) Salary(ctx context.Context, obj *model.Profile) ([]*model.SalaryByRoleResult, error) {
	salariesJSON, err := json.Marshal(obj.Salary)

	if err != nil {
		return nil, errors.New("Processing salary error")
	}

	var salaries []*model.SalaryByRoleResult
	err = json.Unmarshal(salariesJSON, &salaries)

	return salaries, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	_, err := RequireAuthAndActivatedUser(ctx)
	if err != nil {
		return nil, err
	}

	users, err := r.Models.Users.GetAll()

	if err != nil {
		r.Logger.PrintError(fmt.Errorf("%s", err), nil)
		return nil, err
	}

	return users, nil
}

// Offers is the resolver for the offers field.
func (r *queryResolver) Offers(ctx context.Context) ([]*model.Offer, error) {
	_, err := RequireAuthAndActivatedUser(ctx)
	if err != nil {
		return nil, err
	}

	offers, err := r.Models.Offers.GetAll()

	if err != nil {
		r.Logger.PrintError(fmt.Errorf("%s", err), nil)
		return nil, err
	}

	return offers, nil
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context, id string) (*model.Profile, error) {
	_, err := RequireAuthAndActivatedUser(ctx)
	if err != nil {
		return nil, err
	}

	pId, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, errors.New("wrong profile id type")
	}

	profile, err := r.Models.Profiles.GetProfileById(pId)

	if err != nil {
		r.Logger.PrintError(fmt.Errorf("%s", err), nil)
		return nil, err
	}

	return profile, nil
}

// ProfileByUserID is the resolver for the profileByUserId field.
func (r *queryResolver) ProfileByUserID(ctx context.Context, userID string) (*model.Profile, error) {
	_, err := RequireAuthAndActivatedUser(ctx)
	if err != nil {
		return nil, err
	}

	pId, err := strconv.ParseInt(userID, 10, 64)
	if err != nil {
		return nil, errors.New("wrong user_id type")
	}

	profile, err := r.Models.Profiles.GetProfileByUserId(pId)

	if err != nil {
		r.Logger.PrintError(fmt.Errorf("%s", err), nil)
		return nil, err
	}

	return profile, nil
}

// Bookmarks is the resolver for the bookmarks field.
func (r *queryResolver) Bookmarks(ctx context.Context, userID string) ([]*model.Profile, error) {
	user, err := RequireAuthAndActivatedUser(ctx)
	if err != nil {
		return nil, err
	}

	uId, err := strconv.ParseInt(userID, 10, 64)
	if err != nil {
		return nil, errors.New("wrong user_id type")
	}

	if user.ID != uId {
		return nil, errors.New("you can query only your bookmarks")
	}

	profiles, err := r.Models.Users.GetAllBookmarksByUserId(uId)

	if err != nil {
		r.Logger.PrintError(fmt.Errorf("%s", err), nil)
		return nil, err
	}

	return profiles, nil
}

// Roles is the resolver for the roles field.
func (r *userResolver) Roles(ctx context.Context, obj *model.User) ([]string, error) {
	_, err := RequireAuthAndActivatedUser(ctx)
	if err != nil {
		return nil, err
	}

	roles, err := r.Models.Users.GetRolesByUserId(obj.ID)

	if err != nil {
		r.Logger.PrintError(fmt.Errorf("%s", err), nil)
		return nil, err
	}

	return roles, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Offer returns OfferResolver implementation.
func (r *Resolver) Offer() OfferResolver { return &offerResolver{r} }

// Profile returns ProfileResolver implementation.
func (r *Resolver) Profile() ProfileResolver { return &profileResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type offerResolver struct{ *Resolver }
type profileResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
